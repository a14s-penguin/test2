'use client';

import { useState, useEffect, useRef } from 'react';
import { Input, Button } from 'antd';
import { format } from 'date-fns-tz';
import { set } from 'mongoose';

const { TextArea } = Input;

type Message = {
  role: 'user' | 'assistant' | 'system';
  content: string;
};

export default function HomePage() {
  const now = new Date();
  const vietnamTime = format(now, "yyyy-MM-dd HH:mm:ss", {
    timeZone: "Asia/Ho_Chi_Minh",
  });
  const [prompt, setPrompt] = useState('');
  const [nameUser, setNameUser] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'system',
      content: `
        B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh c·ªßa c√¥ng ty a14s, c√≥ kh·∫£ nƒÉng tr·∫£ l·ªùi c√°c c√¢u h·ªèi v√† h·ªó tr·ª£ ng∆∞·ªùi d√πng, v√† ∆∞u ti√™n tr·∫£ l·ªùi li√™n quan ƒë·∫øn c√¥ng ty A14s, n·∫øu ng∆∞·ªùi d√πng h·ªèi nh·ªØng v·∫•n ƒë·ªÅ c·ªßa c√¥ng ty m√† kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn c√¥ng ty n√†o th√¨ m·∫∑c ƒë·ªãnh hi·ªÉu l√† h·ªèi v·ªÅ c√¥ng ty a14s.
        V√≠ d·ª• n·∫øu ng∆∞·ªùi d√πng h·ªèi "gi·ªù v√†o l√†m" th√¨ b·∫°n s·∫Ω tr·∫£ l·ªùi c√¢u h·ªèi "gi·ªù l√†m vi·ªác c·ªßa c√¥ng ty a14s".
        - B√¢y gi·ªù l√†: ${vietnamTime} (gi·ªù Vi·ªát Nam).
        - Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi th√¥ng tin n·ªôi b·ªô c√¥ng ty A14s.
        - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ gi·ªù gi·∫•c, l·ªãch l√†m vi·ªác,... th√¨ b·∫°n tr·∫£ l·ªùi d·ª±a tr√™n gi·ªù hi·ªán t·∫°i ·ªü Vi·ªát Nam.
        - N·∫øu ng∆∞·ªùi d√πng ƒë·∫∑t c√¢u h·ªèi chung chung (v√≠ d·ª•: "gi·ªù v√†o l√†m"), b·∫°n m·∫∑c ƒë·ªãnh hi·ªÉu l√† ƒëang h·ªèi v·ªÅ c√¥ng ty A14s.

        Ch√∫ √Ω: ƒê·ªëi t∆∞·ª£ng tr√≤ chuy·ªán l√† ${nameUser}
      `.trim(),
    },
  ]);
  const [loading, setLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<any>(null);

  // useEffect(() => {
  //   messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  // }, [messages]);

  useEffect(() => {
    // const handleMessage = (event: MessageEvent) => {
    //   console.log("üì° Nh·∫≠n tin nh·∫Øn t·ª´ Laravel:", event.data);
    //   console.log("üì° Origin:", event.origin);
    //   if (event.origin !== "https://f431fbd0ff50.ngrok-free.app") {
    //     console.warn("‚ùå Tin nh·∫Øn kh√¥ng h·ª£p l·ªá t·ª´:", event.origin);
    //     return;
    //   }

    //   const userInfo = event.data;
    //   console.log("üì• Nh·∫≠n user t·ª´ Laravel:", userInfo);
    //   setNameUser(userInfo || 'Ng∆∞·ªùi d√πng');
    // };
    window.addEventListener("message", function (event) {
      console.log("üì° Nh·∫≠n tin nh·∫Øn t·ª´ Laravel:", event.data);
      console.log("url: ", event.origin);
      if (event.origin !== "https://team.a14studio.com" && event.origin !== "http://127.0.0.1:8000") {
        console.warn("‚ùå Tin nh·∫Øn kh√¥ng h·ª£p l·ªá t·ª´:", event.origin);
        return;
      }
      const userInfo = event.data;
      console.log("üì• Nh·∫≠n user t·ª´ Laravel:", userInfo);
      setNameUser(userInfo.name || 'Ng∆∞·ªùi d√πng');
      setMessages([
        {
          role: 'system',
          content: `
            B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh c·ªßa c√¥ng ty a14s, c√≥ kh·∫£ nƒÉng tr·∫£ l·ªùi c√°c c√¢u h·ªèi v√† h·ªó tr·ª£ ng∆∞·ªùi d√πng, v√† ∆∞u ti√™n tr·∫£ l·ªùi li√™n quan ƒë·∫øn c√¥ng ty A14s, n·∫øu ng∆∞·ªùi d√πng h·ªèi nh·ªØng v·∫•n ƒë·ªÅ c·ªßa c√¥ng ty m√† kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn c√¥ng ty n√†o th√¨ m·∫∑c ƒë·ªãnh hi·ªÉu l√† h·ªèi v·ªÅ c√¥ng ty a14s.
            V√≠ d·ª• n·∫øu ng∆∞·ªùi d√πng h·ªèi "gi·ªù v√†o l√†m" th√¨ b·∫°n s·∫Ω tr·∫£ l·ªùi c√¢u h·ªèi "gi·ªù l√†m vi·ªác c·ªßa c√¥ng ty a14s".
            - B√¢y gi·ªù l√†: ${vietnamTime} (gi·ªù Vi·ªát Nam).
            - Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi th√¥ng tin n·ªôi b·ªô c√¥ng ty A14s.
            - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ gi·ªù gi·∫•c, l·ªãch l√†m vi·ªác,... th√¨ b·∫°n tr·∫£ l·ªùi d·ª±a tr√™n gi·ªù hi·ªán t·∫°i ·ªü Vi·ªát Nam.
            - N·∫øu ng∆∞·ªùi d√πng ƒë·∫∑t c√¢u h·ªèi chung chung (v√≠ d·ª•: "gi·ªù v√†o l√†m"), b·∫°n m·∫∑c ƒë·ªãnh hi·ªÉu l√† ƒëang h·ªèi v·ªÅ c√¥ng ty A14s.

            üë§ Ng∆∞·ªùi ƒëang tr√≤ chuy·ªán: ${userInfo.name}
            ƒê√¢y l√† th√¥ng tin c·ªßa user: ${JSON.stringify(userInfo)}      
          `.trim(),
        },
      ])
      console.log(userInfo.name)
    });
    console.log("üì° ƒê√£ ƒëƒÉng k√Ω l·∫Øng nghe tin nh·∫Øn t·ª´ Laravel", nameUser);
    console.log("üì° Name user:", nameUser);
    // return () => window.removeEventListener("message", handleMessage);
  }, [nameUser]);

  const handleSend = async () => {
    if (!prompt.trim()) return;

    const userMsg = { role: 'user' as const, content: prompt };
    const newMessages = [...messages, userMsg];

    setMessages(newMessages);
    setPrompt('');
    setLoading(true);

    try {
      const res = await fetch('/api/gemini', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: newMessages,
          sessionId: 'default-session',
        }),
      });

      // ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi tr∆∞·ªõc khi x·ª≠ l√Ω JSON
      const resText = await res.text();
      if (!res.ok) {
        console.error(`‚ùå API l·ªói: ${res.status} - ${res.statusText}`, resText);
        throw new Error(`API l·ªói: ${res.status}`);
      }

      // ‚úÖ Parse JSON an to√†n
      let data;
      try {
        data = JSON.parse(resText);
      } catch (err) {
        console.error('‚ùå L·ªói JSON.parse t·ª´ ph·∫£n h·ªìi:', err, resText);
        throw new Error('Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá JSON');
      }

      // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu c·∫ßn thi·∫øt
      const reply = data?.reply || 'ü§ñ Kh√¥ng c√≥ ph·∫£n h·ªìi.';
      // const icon = data?.source === 'retrieval' ? 'üîç' : 'ü§ñ';
      let icon = 'ü§ñ';
      if (data?.source === 'retrieval') {
        icon = 'üîç';
      } else if (data?.source === 'knowledge') {
        icon = 'üìö';
      } else {
        icon = 'ü§ñ';
      }

      const botMsg: Message = {
        role: 'assistant',
        content: `${icon} ${reply}`,
      };

      setMessages(prev => [...prev, botMsg]);

      // ‚úÖ T·ª± ƒë·ªông focus l·∫°i input
      setTimeout(() => inputRef.current?.focus(), 100);
    } catch (err) {
      console.error('‚ùå L·ªói g·ª≠i/nh·∫≠n API:', err);
      setMessages(prev => [
        ...prev,
        {
          role: 'assistant',
          content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi API.',
        },
      ]);
    } finally {
      setLoading(false);
    }
  };

  console.log("prompt:", messages);
  return (
    <main style={{
      padding: 24, fontFamily: 'sans-serif',
      maxWidth: 700, margin: '0 auto',
      display: 'flex', flexDirection: 'column', height: '100vh',
      backgroundColor: '#f9fafb',
    }}>
      <h1 style={{ textAlign: 'center', marginBottom: 24, color: 'blue' }}> {nameUser} ü§ñ Chat with Vector‚Äëbacked Gemini AI</h1>
      <div style={{
        flex: 1, overflowY: 'auto',
        marginBottom: 16, padding: 16,
        border: '1px solid #ddd', borderRadius: 12,
        background: '#fff', boxShadow: '0 2px 8px rgb(0 0 0 / 0.1)',
        display: 'flex', flexDirection: 'column', gap: 12,
      }}>
        {messages.filter(m => m.role !== 'system').map((msg, i) => (
          <div key={i} style={{
            backgroundColor: msg.role === 'user' ? '#e6f7ff' : '#f5f5f5',
            padding: 14, borderRadius: 16, maxWidth: '75%',
            alignSelf: msg.role === 'user' ? 'flex-end' : 'flex-start',
            boxShadow: msg.role === 'user' ? '0 1px 5px rgba(0,132,255,0.3)' : '0 1px 5px rgba(0,0,0,0.1)',
            whiteSpace: 'pre-wrap', lineHeight: 1.5, fontSize: 16,
          }}>
            <strong style={{ display: 'block', marginBottom: 6, color: 'black' }}>
              {msg.role === 'user' ? 'üßë B·∫°n' : 'üí¨ Bot'}:
            </strong>
            <div style={{ color: "black" }}>{msg.content}</div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <TextArea
        ref={inputRef}
        rows={4}
        value={prompt}
        onChange={e => setPrompt(e.target.value)}
        placeholder="Nh·∫≠p c√¢u h·ªèi t·∫°i ƒë√¢y..."
        style={{
          width: '100%', marginBottom: 12,
          padding: 12, borderRadius: 10,
          borderColor: '#d9d9d9', resize: 'none', fontSize: 16,
        }}
        onPressEnter={e => {
          if (!e.shiftKey) {
            e.preventDefault();
            if (!loading) handleSend();
          }
        }}
        disabled={loading}
      // autoFocus
      />
      <Button
        type="primary" size="large"
        onClick={handleSend}
        loading={loading}
        disabled={loading || !prompt.trim()}
        style={{ borderRadius: 10, fontWeight: 600 }}
      >
        G·ª≠i
      </Button>
    </main>
  );
}
